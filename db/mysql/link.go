package mysql

import (
	"database/sql"
	"fmt"

	"git.chaos-hip.de/RepairCafe/PartMATE/db"
	"git.chaos-hip.de/RepairCafe/PartMATE/models"
	"github.com/lithammer/shortuuid/v3"
)

const (
	linkFields    = "link, partID, partAttachmentID, storageID, auto_generated"
	linkTableName = "mate_links"
)

// GetLinkByID returns the link with the given ID
// Mainly this is used internally to fetch the DB ID of entities
func (d *DB) GetLinkByID(id string) (*models.Link, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE link = ?", linkFields, linkTableName)
	var out models.Link
	if err := d.db.Get(&out, query, id); err != nil {
		if err == sql.ErrNoRows {
			// Nothing found
			return nil, nil
		}
		return nil, fmt.Errorf("failed to fetch link: %w", err)
	}
	return &out, nil
}

// DeleteLinkByID will delete the link with the given ID
func (d *DB) DeleteLinkByID(linkID string) error {
	query := fmt.Sprintf("DELETE FROM %s WHERE link = ?", linkTableName)
	res, err := d.db.Exec(query, linkID)
	if err != nil {
		return fmt.Errorf("failed to delete link %#v: %w", linkID, err)
	}
	rows, err := res.RowsAffected()
	if err != nil {
		return fmt.Errorf("failed to get rows affected by deletion: %w", err)
	}
	if rows == 0 {
		return db.ErrNothingDeleted
	}
	return nil
}

// itemIdCheck checks if an item with the given ID exists in the table
// If if exists, it will just return a NIL error
func (d *DB) itemIdCheck(id int, tableName string) error {
	query := fmt.Sprintf("SELECT COUNT(*) FROM %s WHERE id = ?", tableName)
	var num int
	if err := d.db.Get(&num, query, id); err != nil {
		return fmt.Errorf("failed to check for item existence on %#v: %w", tableName, err)
	}
	if num == 0 {
		return fmt.Errorf("the linked item does not exist (%#v)", tableName)
	}
	return nil
}

// CreateLink creates the link to the given target
// Passing a link with an empty ID will generate a new ID
func (d *DB) CreateLink(link models.Link) (*models.Link, error) {
	if link.Link == "" {
		link.Link = shortuuid.New()
	}
	if link.PartID != nil {
		if err := d.itemIdCheck(*link.PartID, partTableName); err != nil {
			return nil, err
		}
	}
	if link.PartAttachmentID != nil {
		if err := d.itemIdCheck(*link.PartAttachmentID, partAttachmentTableName); err != nil {
			return nil, err
		}
	}
	if link.StorageID != nil {
		if err := d.itemIdCheck(*link.StorageID, storageLocationTableName); err != nil {
			return nil, err
		}
	}

	query := fmt.Sprintf("INSERT INTO %s(%s) VALUES(?, ?, ?, ?, ?)", linkTableName, linkFields)
	if _, err := d.db.Exec(
		query,
		link.Link,
		link.PartID,
		link.PartAttachmentID,
		link.StorageID,
		link.AutoGenerated,
	); err != nil {
		return nil, fmt.Errorf("failed to create link: %w", err)
	}
	return &link, nil
}
