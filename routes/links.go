package routes

import (
	"net/http"
	"strings"

	"git.chaos-hip.de/RepairCafe/PartMATE/db"
	"git.chaos-hip.de/RepairCafe/PartMATE/errors"
	"git.chaos-hip.de/RepairCafe/PartMATE/models"
	"github.com/gin-gonic/gin"
)

// MakeLinkCreate handler creates a handler function for the create link endpoint
func MakeLinkCreateHandler(dbInstance db.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		var input models.LinkDTO
		if err := c.BindJSON(&input); err != nil {
			c.AbortWithStatusJSON(
				http.StatusBadRequest,
				errors.NewResponse(errors.TypeIllegalData, "Illegal link request", err),
			)
			return
		}
		if err := input.Validate(); err != nil {
			c.AbortWithStatusJSON(
				http.StatusBadRequest,
				errors.NewResponse(errors.TypeIllegalData, "Invalid link request", err),
			)
			return
		}
		link, err := input.ToLink(dbInstance.GetLinkByID)
		if err != nil {
			c.AbortWithStatusJSON(
				http.StatusBadRequest,
				errors.NewResponse(errors.TypeIllegalData, "Target validation failed", err),
			)
			return
		}
		// API requests never create auto-generated links
		link.AutoGenerated = false
		outLink, err := dbInstance.CreateLink(*link)
		if err != nil {
			if strings.Contains(err.Error(), "Duplicate entry") {
				c.AbortWithStatusJSON(
					http.StatusConflict,
					errors.NewResponse(errors.TypeConflict, "A link with the given ID does already exist", nil),
				)
				return
			}
			c.AbortWithStatusJSON(
				http.StatusInternalServerError,
				errors.NewResponse(errors.TypeIllegalData, "Failed to create link", err),
			)
			return
		}
		c.JSON(http.StatusOK, outLink.ToDTO())
	}
}

// MakeLinkDeleteHandler creates a handler function to use with the DeleteLink endpoint
func MakeLinkDeleteHandler(dbInstance db.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		linkID := strings.TrimSpace(c.Param("id"))
		if linkID == "" {
			c.AbortWithStatusJSON(
				http.StatusBadRequest,
				errors.NewResponse(errors.TypeIllegalData, "No link ID given", nil),
			)
			return
		}
		if err := dbInstance.DeleteLinkByID(linkID); err != nil {
			if err == db.ErrNothingDeleted {
				c.AbortWithStatusJSON(
					http.StatusNotFound,
					errors.NewResponse(errors.TypeNotFound, "The link with the given ID does not exist", nil),
				)
				return
			}
			c.AbortWithStatusJSON(
				http.StatusInternalServerError,
				errors.NewResponse(errors.TypeDBError, "Failed to delete link", err),
			)
			return
		}
		c.Status(http.StatusNoContent)
	}
}
